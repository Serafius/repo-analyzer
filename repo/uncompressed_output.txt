<source type="github_repository" url="https://github.com/Serafius/data-wallet-express">
<file name=".env">
PORT=5000
UNSPLASH_ACCESS_KEY=LdA7w--7EFzJo552koTp0rB41pMbHtgmx5pFAt1eaKc
UNSPLASH_SECRET_KEY=ZH35YG6WzBukA9tuy7efcO3BE_XwKY7SHF81ApfT_h4
GOOGLE_CLIENT_ID=87720096176-3r5osj340hccnk1nao7f07trmimvqpcu.apps.googleusercontent.com
</file>
<file name="README.md">
&lt;div align='center'&gt;
    &lt;h1&gt;&lt;b&gt;üóùÔ∏è [Data wallet] üóùÔ∏è&lt;/b&gt;&lt;/h1&gt;
    &lt;img src='https://bernardmarr.com/img/blog/what-is-big-data.png' width='250' height='250' /&gt;
    &lt;p&gt;Store your data securely and manage them easily.&lt;/p&gt;

![JavaScript](https://badgen.net/badge/JavaScript/[version]/yellow?)
![Node.js](https://badgen.net/badge/Node.js/[version]/green?)
&lt;/div&gt;

---

## üíæ **ABOUT**

this project is under **developement** and is available for testing - **private**

Main points:

- Structuring forms
- User friendly
- Secure data

feel free to try it out! `will be open source!`

&lt;br /&gt;

---

## üóíÔ∏è **INSTALLATION**

### local installation:

1. clone the repo

```
git clone https://github.com/Serafius/data-wallet-express.git
```

2. cd into cloned repo ( or open it with IDE )

```
cd data-wallet-express
```

3. install dependencies

```
npm i
```

4. start the app
   
```
npm start
```

5 you can access the app on

```
localhost:5000
```

&lt;br /&gt;

---
## üîó **API Routes**

### User Routes

- `GET` /api/user/search/:id
  - find a user

- `POST` /api/user/create
  - Creates a new user

### Script Routes

- `GET` /script/test
  - Test a random data

&lt;br /&gt;

</file>
<file name="app.js">
import express from "express";
import cors from "cors";
import "dotenv/config";

import { router } from "./routes/index.js";
import { overrideLogs } from "./utilities/overrideLogs.js";
import dataWalletDB from "./databases/data-wallet.js"

const app = express();
const port = process.env.PORT

app.use(cors());
overrideLogs();

app.use("/", router);

app.listen(port, () =&gt; {
  console.log("Connected API to " + port);
});

</file>
<file name="controllers/auth/google/createAuthUrl.js">
import queryString from "query-string";

export const createAuthUrl = (req, res) =&gt; {
  try {
    const stringifiedParams = queryString.stringify({
      client_id: process.env.GOOGLE_CLIENT_ID,
      redirect_uri: "http://localhost:3000",
      scope: [
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/userinfo.profile",
      ].join(" "), // space seperated string
      response_type: "code",
      access_type: "offline",
      prompt: "consent",
    });
    const googleLoginUrl = `https://accounts.google.com/o/oauth2/v2/auth?${stringifiedParams}`;
    console.log(googleLoginUrl);
    return res.status(200).json({ data: { url: googleLoginUrl }, err: null });
  } catch (err) {
    console.log(err);
    return res.status(500).json({ data: null, err });
  }
};

</file>
<file name="controllers/auth/google/index.js">
export { createAuthUrl } from "./createAuthUrl.js";

</file>
<file name="controllers/script/index.js">
export { testConnection } from "./testConnection.js";

</file>
<file name="controllers/script/testConnection.js">
import axios from "axios";

export const testConnection = async (req, res) =&gt; {
  try {
    const { data: quoteData } = await axios.get(
      "https://api.quotable.io/random",
    );
    const { data: imageData } = await axios.get(
      "https://api.unsplash.com/photos/random",
      {
        headers: {
          Authorization: "Client-ID " + process.env.UNSPLASH_ACCESS_KEY, // Replace 'your_unsplash_access_key' with your key
        },
      },
    );
    const { content, author } = quoteData;
    const {
      urls: { regular: imageUrl },
    } = imageData;

    res.send(`
      &lt;html&gt; 
        &lt;head&gt;
          &lt;title&gt;Test Connection&lt;/title&gt;
          &lt;style&gt;
            body {
              display: flex;
              justify-content: center;
              align-items: center;
              height: 100vh;
              background-color: #f8f9fa;
              color: #343a40;
              font-family: Arial, sans-serif;
            }
            .content {
              text-align: center;
              max-width: 80%;
            }
            .text {
              font-size: 36px;
              font-weight: bold;
              margin-bottom: 20px;
            }
            .quote {
              font-size: 24px;
              margin-bottom: 10px;
            }
            .author {
              font-size: 20px;
              font-style: italic;
              margin-bottom: 20px;
            }
            img {
                width: 300px;
                height: 200px;
                object-fit: cover;
              }
          &lt;/style&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;div class="content"&gt;
            &lt;p class="text"&gt;Connection secured!&lt;/p&gt;
            &lt;p class="quote"&gt;"${content}"&lt;/p&gt;
            &lt;p class="author"&gt;- ${author}&lt;/p&gt;
            &lt;img src="${imageUrl}" alt="Random Unsplash Image"&gt;
          &lt;/div&gt;
        &lt;/body&gt;
      &lt;/html&gt;`);
  } catch (error) {
    console.error("Error fetching data", error);
    res.status(500).send("Error fetching data");
  }
};

</file>
<file name="controllers/user/createUser.js">
import { User } from "../../models/index.js";

export const createUser = async (req, res) =&gt; {
  const { name, email } = req.body;

  try {
    const user = await User.create({ name, email });
    res.json({ data: { user, token }, err: null });
  } catch (err) {
    console.error("Error fetching data", err);
    res.status(500).json({ data: null, err });
  }
};

</file>
<file name="controllers/user/getUser.js">
import { User } from "../../models/index.js";

export const getUser = async (req, res) =&gt; {
  const { id } = req.params;

  try {
    if (id.length != 24) {
      return res.status(400).json({ data: null, err: "id length incorrect" });
    }
    const user = await User.findById(id);
    res.json({ data: { user }, err: null });
  } catch (err) {
    console.error("Error fetching data", err);
    res.status(500).json({ data: null, err });
  }
};

</file>
<file name="controllers/user/index.js">
export { getUser } from "./getUser.js";
export { createUser } from "./createUser.js";

</file>
<file name="databases/data-wallet.js">
import mongoose from "mongoose";

const db = "mongodb://localhost:27017/data-wallet";

const datawalletConnection = mongoose.createConnection(db, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

datawalletConnection.on("connected", () =&gt; {
  console.log("Connected to database");
});

datawalletConnection.on("error", (err) =&gt; {
  console.error("Error connecting to database:", err);
});

export default datawalletConnection;

</file>
<file name="models/Document.js">
import { Schema } from "mongoose";
import db from "../databases/data-wallet.js";

const documentSchema = new Schema({
  
});

export const Document = db.model("Document", documentSchema);

</file>
<file name="models/Form.js">
import { Schema } from "mongoose";
import db from "../databases/data-wallet.js";

const fieldTypes = ["text", "radio", "check", "menu", "date", "number", "email", "textarea"];

const formSchema = new Schema(
  {
    title: { type: String, required: true },
    subtitle: { type: String },
    details: { type: String },

    sections: [
      {
        title: { type: String, required: true },
        fields: [
          {
            label: { type: String, required: true },
            type: { type: String, enum: fieldTypes, required: true },
            required: { type: Boolean, default: false }, // Indicates if the field is required to be filled
            options: { type: [String], required: function() { return ['radio', 'check', 'menu'].includes(this.type); } }, // Options for radio, check, and menu field types
            default: { type: Schema.Types.Mixed }, // Default value for the field
            placeholder: { type: String }, // Placeholder for the field
          },
        ],
      }
    ],
    owner: { type: Schema.Types.ObjectId, ref: "User" },
    isDeleted: { type: Boolean, default: false },
  },
  { timestamps: true },
);

export const Form = db.model("Form", formSchema);

</file>
<file name="models/User.js">
import { Schema } from "mongoose";
import db from "../databases/data-wallet.js";

const loginMethods = [
  "google",
  "email",
  "facebook",
  "discord",
  "twitter",
  "instagram",
];

const userSchema = new Schema(
  {
    personalInfo: {
      name: { type: String },
      username: {
        name: { type: String, required: true },
        tag: { type: Number, required: true },
      },
      email: { type: String, required: true },
      pictureUrl: { type: String },
      about: { type: String },
      timezone: { type: String },
    },
    credentials: {
      ids: [{ type: Map, of: String }],
      loginMethod: {
        type: String,
        enum: loginMethods,
        default: loginMethods[0],
      },
      lastLogin: { type: Date },
    },
    auth: {
      password: { type: String },
    },
    isDeleted: { type: Boolean, default: false },
  },
  { timestamps: true },
);

export const User = db.model("User", userSchema);

</file>
<file name="models/index.js">
export { User } from "./User.js";

</file>
<file name="routes/api/auth/email.js">

</file>
<file name="routes/api/auth/google.js">
import { Router } from "express";
import { createAuthUrl } from "../../../controllers/auth/google/index.js";

const router = Router();
router.get("/callback", createAuthUrl)

export default router;

</file>
<file name="routes/api/auth/index.js">
import { Router } from "express";

import google from "./google.js";

const router = Router();
router.use("/google", google);

export default router;

</file>
<file name="routes/api/index.js">
import { Router } from "express";

import user from "./user.js";
import auth from "./auth/index.js"

const router = Router();
router.use("/user", user).use("/auth", auth);

export default router;
</file>
<file name="routes/api/user.js">
import { Router } from "express";
import { getUser, createUser } from "../../controllers/user/index.js";

const router = Router();
router.get("/search/:id", getUser).post("/create", createUser);

export default router;

</file>
<file name="routes/index.js">
import { Router } from "express";

import script from "./script.js";
import api from "./api/index.js";

export const router = Router();
router.use("/script", script).use("/api", api);

</file>
<file name="routes/script.js">
import { Router } from "express";
import {
    testConnection,
} from "../controllers/script/index.js";

const router = Router();
router
  .get("/test", testConnection)

export default router;

</file>
<file name="utilities/getTime.js">
export const getTime = () =&gt; {
  const now = new Date();
  return `${now.getHours().toString().padStart(2, "0")}:${now
    .getMinutes()
    .toString()
    .padStart(2, "0")}:${now.getSeconds().toString().padStart(2, "0")}`;
};

</file>
<file name="utilities/overrideLogs.js">
import { getTime } from "./getTime.js";

export const overrideLogs = () =&gt; {
  const originalLog = console.log;

  console.log = function (...args) {
    args.unshift(getTime() + " | ");
    originalLog.apply(this, args);
  };
};

</file>
</source>