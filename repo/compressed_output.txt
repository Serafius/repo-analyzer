<?xml version='1.0' encoding='utf-8'?>
<source type="github_repository" url="https://github.com/Serafius/data-wallet-express"><file name=".env">port=5000 unsplash_access_key=lda7w--7efzjo552kotp0rb41pmbhtgmx5pfat1eakc unsplash_secret_key=zh35yg6wzbuka9tuy7efco3be_xwky7shf81apft_h4 google_client_id=87720096176-3r5osj340hccnk1nao7f07trmimvqpcu.apps.googleusercontent.com</file><file name="README.md">&lt;div align='center'&gt; &lt;h1&gt;&lt;b&gt; [data wallet] &lt;/b&gt;&lt;/h1&gt; &lt;img src='https://bernardmarr.com/img/blog/what-is-big-data.png' width='250' height='250' /&gt; &lt;p&gt;store data securely manage easily.&lt;/p&gt; ![javascript](https://badgen.net/badge/javascript/[version]/yellow?) ![node.js](https://badgen.net/badge/node.js/[version]/green?) &lt;/div&gt; --- ## **about** project **developement** available testing - **private** main points: - structuring forms - user friendly - secure data feel free try out! `will open source!` &lt;br /&gt; --- ## **installation** ### local installation: 1. clone repo ``` git clone https://github.com/serafius/data-wallet-express.git ``` 2. cd cloned repo ( open ide ) ``` cd data-wallet-express ``` 3. install dependencies ``` npm ``` 4. start app ``` npm start ``` 5 access app ``` localhost:5000 ``` &lt;br /&gt; --- ## **api routes** ### user routes - `get` /api/user/search/:id - find user - `post` /api/user/create - creates new user ### script routes - `get` /script/test - test random data &lt;br /&gt;</file><file name="app.js">import express "express"; import cors "cors"; import "dotenv/config"; import { router } "./routes/index.js"; import { overridelogs } "./utilities/overridelogs.js"; import datawalletdb "./databases/data-wallet.js" const app = express(); const port = process.env.port app.use(cors()); overridelogs(); app.use("/", router); app.listen(port, () =&gt; { console.log("connected api " + port); });</file><file name="controllers/auth/google/createAuthUrl.js">import querystring "query-string"; export const createauthurl = (req, res) =&gt; { try { const stringifiedparams = querystring.stringify({ client_id: process.env.google_client_id, redirect_uri: "http://localhost:3000", scope: [ "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile", ].join(" "), // space seperated string response_type: "code", access_type: "offline", prompt: "consent", }); const googleloginurl = `https://accounts.google.com/o/oauth2/v2/auth?${stringifiedparams}`; console.log(googleloginurl); return res.status(200).json({ data: { url: googleloginurl }, err: null }); } catch (err) { console.log(err); return res.status(500).json({ data: null, err }); } };</file><file name="controllers/auth/google/index.js">export { createauthurl } "./createauthurl.js";</file><file name="controllers/script/index.js">export { testconnection } "./testconnection.js";</file><file name="controllers/script/testConnection.js">import axios "axios"; export const testconnection = async (req, res) =&gt; { try { const { data: quotedata } = await axios.get( "https://api.quotable.io/random", ); const { data: imagedata } = await axios.get( "https://api.unsplash.com/photos/random", { headers: { authorization: "client-id " + process.env.unsplash_access_key, // replace 'your_unsplash_access_key' key }, }, ); const { content, author } = quotedata; const { urls: { regular: imageurl }, } = imagedata; res.send(` &lt;html&gt; &lt;head&gt; &lt;title&gt;test connection&lt;/title&gt; &lt;style&gt; body { display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f8f9fa; color: #343a40; font-family: arial, sans-serif; } .content { text-align: center; max-width: 80%; } .text { font-size: 36px; font-weight: bold; margin-bottom: 20px; } .quote { font-size: 24px; margin-bottom: 10px; } .author { font-size: 20px; font-style: italic; margin-bottom: 20px; } img { width: 300px; height: 200px; object-fit: cover; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="content"&gt; &lt;p class="text"&gt;connection secured!&lt;/p&gt; &lt;p class="quote"&gt;"${content}"&lt;/p&gt; &lt;p class="author"&gt;- ${author}&lt;/p&gt; &lt;img src="${imageurl}" alt="random unsplash image"&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;`); } catch (error) { console.error("error fetching data", error); res.status(500).send("error fetching data"); } };</file><file name="controllers/user/createUser.js">import { user } "../../models/index.js"; export const createuser = async (req, res) =&gt; { const { name, email } = req.body; try { const user = await user.create({ name, email }); res.json({ data: { user, token }, err: null }); } catch (err) { console.error("error fetching data", err); res.status(500).json({ data: null, err }); } };</file><file name="controllers/user/getUser.js">import { user } "../../models/index.js"; export const getuser = async (req, res) =&gt; { const { id } = req.params; try { (id.length != 24) { return res.status(400).json({ data: null, err: "id length incorrect" }); } const user = await user.findbyid(id); res.json({ data: { user }, err: null }); } catch (err) { console.error("error fetching data", err); res.status(500).json({ data: null, err }); } };</file><file name="controllers/user/index.js">export { getuser } "./getuser.js"; export { createuser } "./createuser.js";</file><file name="databases/data-wallet.js">import mongoose "mongoose"; const db = "mongodb://localhost:27017/data-wallet"; const datawalletconnection = mongoose.createconnection(db, { usenewurlparser: true, useunifiedtopology: true, }); datawalletconnection.on("connected", () =&gt; { console.log("connected database"); }); datawalletconnection.on("error", (err) =&gt; { console.error("error connecting database:", err); }); export default datawalletconnection;</file><file name="models/Document.js">import { schema } "mongoose"; import db "../databases/data-wallet.js"; const documentschema = new schema({ }); export const document = db.model("document", documentschema);</file><file name="models/Form.js">import { schema } "mongoose"; import db "../databases/data-wallet.js"; const fieldtypes = ["text", "radio", "check", "menu", "date", "number", "email", "textarea"]; const formschema = new schema( { title: { type: string, required: true }, subtitle: { type: string }, details: { type: string }, sections: [ { title: { type: string, required: true }, fields: [ { label: { type: string, required: true }, type: { type: string, enum: fieldtypes, required: true }, required: { type: boolean, default: false }, // indicates field required filled options: { type: [string], required: function() { return ['radio', 'check', 'menu'].includes(this.type); } }, // options radio, check, menu field types default: { type: schema.types.mixed }, // default value field placeholder: { type: string }, // placeholder field }, ], } ], owner: { type: schema.types.objectid, ref: "user" }, isdeleted: { type: boolean, default: false }, }, { timestamps: true }, ); export const form = db.model("form", formschema);</file><file name="models/User.js">import { schema } "mongoose"; import db "../databases/data-wallet.js"; const loginmethods = [ "google", "email", "facebook", "discord", "twitter", "instagram", ]; const userschema = new schema( { personalinfo: { name: { type: string }, username: { name: { type: string, required: true }, tag: { type: number, required: true }, }, email: { type: string, required: true }, pictureurl: { type: string }, about: { type: string }, timezone: { type: string }, }, credentials: { ids: [{ type: map, of: string }], loginmethod: { type: string, enum: loginmethods, default: loginmethods[0], }, lastlogin: { type: date }, }, auth: { password: { type: string }, }, isdeleted: { type: boolean, default: false }, }, { timestamps: true }, ); export const user = db.model("user", userschema);</file><file name="models/index.js">export { user } "./user.js";</file><file name="routes/api/auth/email.js" /><file name="routes/api/auth/google.js">import { router } "express"; import { createauthurl } "../../../controllers/auth/google/index.js"; const router = router(); router.get("/callback", createauthurl) export default router;</file><file name="routes/api/auth/index.js">import { router } "express"; import google "./google.js"; const router = router(); router.use("/google", google); export default router;</file><file name="routes/api/index.js">import { router } "express"; import user "./user.js"; import auth "./auth/index.js" const router = router(); router.use("/user", user).use("/auth", auth); export default router;</file><file name="routes/api/user.js">import { router } "express"; import { getuser, createuser } "../../controllers/user/index.js"; const router = router(); router.get("/search/:id", getuser).post("/create", createuser); export default router;</file><file name="routes/index.js">import { router } "express"; import script "./script.js"; import api "./api/index.js"; export const router = router(); router.use("/script", script).use("/api", api);</file><file name="routes/script.js">import { router } "express"; import { testconnection, } "../controllers/script/index.js"; const router = router(); router .get("/test", testconnection) export default router;</file><file name="utilities/getTime.js">export const gettime = () =&gt; { const = new date(); return `${now.gethours().tostring().padstart(2, "0")}:${now .getminutes() .tostring() .padstart(2, "0")}:${now.getseconds().tostring().padstart(2, "0")}`; };</file><file name="utilities/overrideLogs.js">import { gettime } "./gettime.js"; export const overridelogs = () =&gt; { const originallog = console.log; console.log = function (...args) { args.unshift(gettime() + " | "); originallog.apply(this, args); }; };</file></source>